Serialization in Java [Advantages and Examples Explained]
By Simplilearn
Last updated on Apr 1, 20218911
Serialization in Java
Table of Contents
What is Serialization in Java?What are the Advantages of Serialization?Points to Note About Serialization in Java?How to Serialize an Object?Serialization in Java With Inheritance (Is-A Relationship)View More
This serialization in Java article will shed light on the mechanism of serialization, and its benefits. It will also explore how to serialize an object, and how to serialize using different Java concepts, with examples.

What is Serialization in Java?
Serialization in Java is the concept of representing an object’s state as a byte stream. The byte stream has all the information about the object. Usually used in Hibernate, JMS, JPA, and EJB, serialization in Java helps transport the code from one JVM to another and then de-serialize it there.

Deserialization is the exact opposite process of serialization where the byte data type stream is converted back to an object in the memory. The best part about these mechanisms is that both are JVM-independent, meaning you serialize on one JVM and de-serialize on another.

What are the Advantages of Serialization?
Serialization offers a plethora of benefits. Some of its primary advantages are:

Used for marshaling (traveling the state of an object on the network)
To persist or save an object’s state
JVM independent
Easy to understand and customize
Points to Note About Serialization in Java?
To serialize an object, there are a few conditions to be met. Some other key points need to be highlighted before you proceed further in the article. 

These are the conditions and points to remember while using serialization in Java.

1. Serialization is a marker interface with no method or data member
You can serialize an object only by implementing the serializable interface
2. All the fields of a class must be serializable; otherwise, use the transient keyword
3. The child class doesn’t have to implement the Serializable interface, if the parent class does
4. The serialization process only saves non-static data members, but not static or transient data members
5. By default, the String and all wrapper classes implement the Serializable interface

// Java code for serialization and deserialization
// of a Java object
import java.io.*;

class Demo implements java.io.Serializable
{
	public int a;
	public String b;

	// Default constructor
	public Demo(int a, String b)
	{
		this.a = a;
		this.b = b;
	}

}

class Test
{
	public static void main(String[] args)
	{
		Demo object = new Demo(1, "geeksforgeeks");
		String filename = "file.ser";
		
		// Serialization
		try
		{
			//Saving of object in a file
			FileOutputStream file = new FileOutputStream(filename);
			ObjectOutputStream out = new ObjectOutputStream(file);
			
			// Method for serialization of object
			out.writeObject(object);
			
			out.close();
			file.close();
			
			System.out.println("Object has been serialized");

		}
		
		catch(IOException ex)
		{
			System.out.println("IOException is caught");
		}


		Demo object1 = null;

		// Deserialization
		try
		{
			// Reading the object from a file
			FileInputStream file = new FileInputStream(filename);
			ObjectInputStream in = new ObjectInputStream(file);
			
			// Method for deserialization of object
			object1 = (Demo)in.readObject();
			
			in.close();
			file.close();
			
			System.out.println("Object has been deserialized ");
			System.out.println("a = " + object1.a);
			System.out.println("b = " + object1.b);
		}
		
		catch(IOException ex)
		{
			System.out.println("IOException is caught");
		}
		
		catch(ClassNotFoundException ex)
		{
			System.out.println("ClassNotFoundException is caught");
		}

	}
}
